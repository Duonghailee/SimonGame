/* NOTE, this simon game is made by a lot of efforts as It is written only by pure/ vanila javascript.
as far as I know about javascript, i know that I don't know it at all. My respect and special thanks to Wojciech Kałużny
who has written a very well basic pattern design to solve simon game problem, you can view his artical here
https://medium.com/front-end-hacking/create-simon-game-in-javascript-d53b474a7416
I have tried some version before with nest setTimeOut funct but none of them works perfectly, actually at first i tried put setInterval inside the 
loop and I hardly learn many things to this 'dangerous' async problem with setInerval 
Hope you enjoy the game
*/




"use strict"

/* Global variable */
var display = document.getElementById("digital-display");
var count = document.getElementById("digital-display").getAttribute("value");
var nodes = document.getElementsByClassName("quarter");
var els = [].slice.call(nodes); //each color parts that player may click

var gameStatus = "off"; // use to track game is on/off
var strictMode = document.getElementById("strictMode"); //this variable tracks the strict mode on/off

const whichPart = ['green', 'red', 'yellow', 'blue'];
const tones = {
    green: new Audio('https://s3.amazonaws.com/freecodecamp/simonSound1.mp3'),
    red: new Audio('https://s3.amazonaws.com/freecodecamp/simonSound2.mp3'),
    yellow: new Audio('https://s3.amazonaws.com/freecodecamp/simonSound3.mp3'),
    blue: new Audio('https://s3.amazonaws.com/freecodecamp/simonSound4.mp3'),
    playerTurn: new Audio('http://soundjax.com/reddo/40725%5EDING1.mp3'),
    fail: new Audio('http://soundjax.com/reddo/76527%5Eerror.mp3')
};

var colors = []; // colors generated by computer
var player = [];



/* this function turn on / off the game */
function toggle() {
    var slider = document.getElementById("slider");
    var status = slider.getAttribute("value"); // on or off
    var turn = status === "off" ? "on" : "off";
    gameStatus = turn; // this varible pass the game status: on/off to the start button
    slider.style.cssFloat = turn === "on" ? "right" : "left"; //slide the toggle
    slider.setAttribute("value", turn);
    console.log("status now is: " + gameStatus);
    if (turn === "off") {
        reset();
        lockClick();
    }
}

/* this funct enable/disable strict mode */
function setStrict() {

    strictMode.setAttribute("value", strictMode.getAttribute("value") === "off" ? "on" : "off");
    strictMode.classList.toggle("lighten");
    console.log("strictmode is: " + strictMode.getAttribute("value"));
}

function startGame() {

    if (gameStatus === "on") {
        //this funct helps blinking the - - in the display panel
        count = "- -";
        display.innerHTML = "<span class='blink'>" + count + "</span";
        setTimeout(function() {
            clearGame();
        }, 2000);

    } else {
        alert("please turn on the game");

    }
}

function reset() {
    count = "";
    updateCount();
    colors = [];
    player = [];
}

function clearGame() {

    count = 0;
    colors = [];
    player = [];
    nextMove();
}

function updateCount() {
    display.innerHTML = count;
}


function lighten(colors) {
    var i = 0;
    var lightening = setInterval(function() { //after each 600ms, lighten continues lighten the next colors set
        lightenColor(colors[i]);
        i++;
        if (i >= colors.length) {
            clearInterval(lightening); //lighten and darken a set of colors has finished
            //now is player turn,
        }
    }, 600);
    player = [];
    setTimeout(function() {
        unLockClick();
    }, 1000);
}

function lightenColor(color) {

    var el = document.getElementById(color);
    el.classList.add("lighten");
    tones[color].play();
    console.log("color: " + color + " brighten");
    var lightOneColor = setTimeout(function() {
        el.classList.remove("lighten");
        console.log("color: " + color + " darken");
    }, 300);
}

function playerInput(colorPlayerInput) {
    player.push(colorPlayerInput);
    checkAudio(colorPlayerInput);
    console.log(colorPlayerInput + " color is clicked");
    match(colors);
}

function match(colors) { //check if player enter the right pattern


    if (colors[player.length - 1] !== player[player.length - 1]) {
        checkAudio("fail");
        if (strictMode.getAttribute("value") === "on") {
            startGame();
        } else {
            lighten(colors);
        }
    } else {
        if (player.length === colors.length) {
            if (count === 20) {
                alert("Congrats! you won");
            } else {
                nextMove();
                console.log("create next level");
            }
        }
    }

}


function lockClick() {
    els.forEach(function(element) {
        element.classList.add("non-click");
        //element.classList.toggle("non-hover");
    }, this);
}

function unLockClick() {
    els.forEach(function(element) {
        element.classList.remove("non-click");
        //element.classList.toggle("non-hover");
    }, this);
}

function nextMove() {
    var colour = whichPart[(Math.floor(Math.random() * 4))];
    colors.push(colour);
    console.log("add extra step / color");
    console.log(colors);
    lighten(colors);
    count++;
    updateCount();
}

//Credit to JohnnyCoder, 
//https://stackoverflow.com/questions/36803176/how-to-prevent-the-play-request-was-interrupted-by-a-call-to-pause-error
function checkAudio(au) {
    var audio = tones[au];
    var isPlaying = audio.currentTime > 0 && !audio.paused && !audio.ended &&
        audio.readyState > 2;
    if (!isPlaying) {
        audio.play();
    } else {
        console.log("audio error");
    }
}

lockClick();